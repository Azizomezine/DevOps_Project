pipeline {
    agent any
    environment {
        // Environment variables for credentials stored securely in Jenkins
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        LOGIN_SONAR_QUBE = credentials('LOGIN_SONAR_QUBE')
        PASSWORD_SONAR_QUBE = credentials('PASSWORD_SONAR_QUBE')
        DOCKER_HUB_PWD = credentials('DOCKER_HUB_PWD')
    }
    stages {

        stage('Checkout GIT') {
            steps {
                // Pulls the code from the specified Git branch using a secure GitHub token
                echo 'Pulling code from the branch...'
                git branch: 'aziz',
                    url: 'https://${GITHUB_TOKEN}@github.com/Azizomezine/DevOps_Project'
            }
        }

        stage('Build with Maven') {
            steps {
                // Compiles the Java code using Maven
                echo 'Building with Maven...'
                sh '''
                mvn clean compile 
                ''' // Use 'bat' instead of 'sh' if running on Windows
            }
        }

       

       


        stage('JaCoCo Report') {
            steps {
                // Publishes the JaCoCo code coverage report in Jenkins
                echo 'Publishing JaCoCo Coverage Report...'
                step([$class: 'JacocoPublisher',
                      execPattern: '**/target/jacoco.exec',           // Path to JaCoCo execution data
                      classPattern: '**/target/classes',              // Path to compiled class files
                      sourcePattern: '**/src/main/java',              // Path to main source files
                      exclusionPattern: '**/target/**,**/*Test*,**/*_javassist/**' // Patterns to exclude from coverage
                ])  
            }
        }
        stage('SonarQube') {
            steps {
                // Runs SonarQube analysis to check code quality, and includes JaCoCo code coverage reports
                echo 'Running SonarQube analysis with JaCoCo coverage report...'
                sh '''
                mvn clean verify sonar:sonar \
                    -Dsonar.login=${LOGIN_SONAR_QUBE} \
                    -Dsonar.password=${PASSWORD_SONAR_QUBE} \
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                ''' // Use 'bat' instead of 'sh' if running on Windows
            }
        }
        stage('NEXUS') {
            steps {
                // Deploys the compiled project to Nexus repository (skips tests to save time)
                echo 'Deploying to Nexus Repository...'
                sh 'mvn deploy -DskipTests'
            }
        }

        stage('Docker Image Building') {
            steps {
                // Builds a Docker image from the project's Dockerfile
                echo 'Building Docker Image...'
                sh '''
                docker build -t azizomezine/devops:latest .
                '''
            }
        }

        stage('Docker Compose') {
            steps {
                // Runs Docker Compose to start up the application and its dependencies
                echo 'Starting Docker Compose...'
                sh '''
                docker compose up -d
                '''
            }
        }

        stage('Setup Prometheus and Grafana') {
            steps {
                // Restarts Prometheus and Grafana containers to ensure monitoring services are up
                echo 'Setting up Prometheus and Grafana...'
                sh 'docker restart prometheus'
                sh 'docker restart grafana'
            }
        }

      
     
    }
}
