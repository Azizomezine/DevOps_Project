pipeline {
    agent any
    environment {
        // Environment variables for credentials stored securely in Jenkins
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        LOGIN_SONAR_QUBE = credentials('LOGIN_SONAR_QUBE')
        PASSWORD_SONAR_QUBE = credentials('PASSWORD_SONAR_QUBE')
        DOCKER_HUB_PWD = credentials('DOCKER_HUB_PWD')
    }
    stages {

        stage('Checkout GIT') {
            steps {
                echo 'Pulling code from the branch...'
                git branch: 'zizo', 
                    url: 'https://github.com/Azizomezine/DevOps_Project', 
                    credentialsId: 'GITHUB_TOKEN'
            }
        }

        stage('Build with Maven') {
            steps {
                echo 'Building with Maven...'
                sh '''
                mvn clean compile 
                '''
            }
        }

        stage('JUNIT/MOCKITO') {
            steps {
                echo 'Running Unit Tests with Mockito...'
                sh 'mvn test'
            }
        }

        stage('JaCoCo Report') {
            steps {
                echo 'Publishing JaCoCo Coverage Report...'
                step([$class: 'JacocoPublisher',
                      execPattern: '**/target/jacoco.exec',
                      classPattern: '**/target/classes',
                      sourcePattern: '**/src/main/java',
                      exclusionPattern: '**/target/**,**/*Test*,**/*_javassist/**'
                ])
            }
        }

        stage('SonarQube') {
            steps {
                echo 'Running SonarQube analysis with JaCoCo coverage report...'
                sh '''
                mvn clean verify sonar:sonar \
                    -Dsonar.login=${LOGIN_SONAR_QUBE} \
                    -Dsonar.password=${PASSWORD_SONAR_QUBE} \
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                '''
            }
        }

        stage('NEXUS') {
            steps {
                echo 'Deploying to Nexus Repository...'
                sh 'mvn deploy -DskipTests'
            }
        }

        stage('Docker Image Building') {
            steps {
                echo 'Building Docker Image...'
                sh '''
                docker build -t azizomezine/devops:latest .
                '''
            }
        }

        stage('Cleanup Docker') {
            steps {
                echo 'Cleaning up existing Docker containers...'
                sh '''
                docker compose down || true
                '''
            }
        }

        stage('Docker Compose') {
            steps {
                echo 'Starting Docker Compose...'
                sh '''
                docker compose up -d --force-recreate
                '''
            }
        }

        stage('Setup Prometheus and Grafana') {
            steps {
                echo 'Setting up Prometheus and Grafana...'
                sh 'docker restart prometheus'
                sh 'docker restart grafana'
            }
        }

        stage('Docker login + push') {
            steps {
                echo 'Logging in and pushing Docker Image to Docker Hub...'
                sh '''
                echo ${DOCKER_HUB_PWD} | docker login -u azizomezine --password-stdin
                docker push azizomezine/devops:latest
                '''
            }
        }

        stage('Mail Notification') {
            steps {
                echo 'Sending Email Notification...'
                mail to: 'mohamedaziz.omezine@esprit.tn',
                     subject: "The pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]' finished",
                     body: """
                    Pipeline details:
                    Job Name: ${env.JOB_NAME}
                    Number of Builds: ${env.BUILD_NUMBER}
                    Build Status: ${currentBuild.currentResult}
                    View the build URL: ${env.BUILD_URL}
                    """
            }
        }
    }
} 
