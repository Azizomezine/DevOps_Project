pipeline { 
    agent any
    environment {
        // Stockage sécurisé des identifiants pour GitHub, SonarQube et Docker Hub
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')         // Jeton d'accès GitHub pour l'accès au dépôt privé
        LOGIN_SONAR_QUBE = credentials('LOGIN_SONAR_QUBE') // Identifiant de connexion SonarQube
        PASSWORD_SONAR_QUBE = credentials('PASSWORD_SONAR_QUBE') // Mot de passe SonarQube
        DOCKER_HUB_PWD = credentials('DOCKER_HUB_PWD')     // Mot de passe Docker Hub pour le push d'image
    }
    stages {

        stage('Checkout GIT') {
            steps {
                echo 'Récupération du code depuis la branche...' // Message pour indiquer le début de l'extraction
                git branch: 'zizo',                    // Spécifie la branche à récupérer
                    url: 'https://github.com/Azizomezine/DevOps_Project', // URL du dépôt GitHub
                    credentialsId: 'GITHUB_TOKEN'      // Identifiants pour accéder au dépôt GitHub
            }
        }

        stage('Build with Maven') {
            steps {
                echo 'Compilation avec Maven...' // Message pour indiquer le début de la compilation
                sh '''
                mvn clean compile            // Commande Maven pour nettoyer et compiler le code
                '''
            }
        }

        stage('JUNIT/MOCKITO') {
            steps {
                echo 'Exécution des tests unitaires avec Mockito...' // Message pour indiquer le début des tests unitaires
                sh 'mvn test'                             // Exécute les tests Maven
            }
        }

        stage('JaCoCo Report') {
            steps {
                echo 'Publication du rapport de couverture JaCoCo...' // Message pour indiquer la publication du rapport JaCoCo
                step([$class: 'JacocoPublisher',             // Classe JaCoCoPublisher pour publier le rapport
                      execPattern: '**/target/jacoco.exec',  // Modèle de fichier pour l'exécution
                      classPattern: '**/target/classes',     // Modèle pour les fichiers de classes
                      sourcePattern: '**/src/main/java',     // Modèle pour les fichiers source
                      exclusionPattern: '**/target/**,**/*Test*,**/*_javassist/**' // Modèles d'exclusion
                ])
            }
        }

        stage('SonarQube') {
            steps {
                echo 'Exécution de l\'analyse SonarQube avec le rapport de couverture JaCoCo...' // Message pour indiquer le début de l'analyse SonarQube
                sh '''
                mvn clean verify sonar:sonar \                      // Exécute SonarQube avec le rapport de couverture
                    -Dsonar.login=${LOGIN_SONAR_QUBE} \             // Utilise l'identifiant SonarQube
                    -Dsonar.password=${PASSWORD_SONAR_QUBE} \       // Utilise le mot de passe SonarQube
                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml // Spécifie le chemin vers le rapport JaCoCo
                '''
            }
        }

        stage('NEXUS') {
            steps {
                echo 'Déploiement vers le dépôt Nexus...' // Message pour indiquer le début du déploiement vers Nexus
                sh 'mvn deploy -DskipTests'             // Commande Maven pour déployer en ignorant les tests
            }
        }

        stage('Docker Image Building') {
            steps {
                echo 'Construction de l\'image Docker...' // Message pour indiquer le début de la construction de l'image Docker
                sh '''
                docker build -t azizomezine/devops:latest . // Construit l'image Docker avec le tag latest
                '''
            }
        }

        stage('Cleanup Docker') {
            steps {
                echo 'Nettoyage des conteneurs Docker existants...' // Message pour indiquer le début du nettoyage des conteneurs
                sh '''
                docker compose down || true // Arrête et supprime les conteneurs en cours d'exécution, ignore les erreurs s'il n'y en a pas
                '''
            }
        }

        stage('Docker Compose') {
            steps {
                echo 'Lancement de Docker Compose...' // Message pour indiquer le lancement de Docker Compose
                sh '''
                docker compose up -d --force-recreate // Recrée et démarre les services en mode détaché
                '''
            }
        }

        stage('Setup Prometheus and Grafana') {
            steps {
                echo 'Configuration de Prometheus et Grafana...' // Message pour indiquer la configuration de Prometheus et Grafana
                sh 'docker restart prometheus'              // Redémarre le conteneur Prometheus pour la surveillance
                sh 'docker restart grafana'                 // Redémarre le conteneur Grafana pour la surveillance
            }
        }

        stage('Docker login + push') {
            steps {
                echo 'Connexion et push de l\'image Docker vers Docker Hub...' // Message pour indiquer la connexion et le push de l'image vers Docker Hub
                sh '''
                echo ${DOCKER_HUB_PWD} | docker login -u azizomezine --password-stdin // Connexion à Docker Hub avec mot de passe
                docker push azizomezine/devops:latest // Pousse l'image Docker avec le tag latest
                '''
            }
        }

        stage('Mail Notification') {
            steps {
                echo 'Envoi de la notification par email...' // Message pour indiquer l'envoi de l'email de notification
                mail to: 'mohamedaziz.omezine@esprit.tn',
                     subject: "Le pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]' est terminé",
                     body: """
                    Détails du pipeline :
                    Nom du Job : ${env.JOB_NAME}
                    Numéro de Build : ${env.BUILD_NUMBER}
                    Statut du Build : ${currentBuild.currentResult}
                    URL du Build : ${env.BUILD_URL}
                    """ // Contenu de l'email avec les détails du pipeline
            }
        }
    }
}

